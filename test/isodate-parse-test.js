import { ISODateParser } from '../src/index.js';

describe('ISO date', () => {
  [
    ['2024-01-27', { Y: 2024, M: 0, D: 27 }],
    ['2024-02-28', { Y: 2024, M: 1, D: 28 }],
    ['2024-02-29', { Y: 2024, M: 1, D: 29 }],
    ['2020-02-29', { Y: 2020, M: 1, D: 29 }],
    ['2016-02-29', { Y: 2016, M: 1, D: 29 }],
    ['2024-01', { Y: 2024, M: 0, D: 1 }],
    ['2024-12', { Y: 2024, M: 11, D: 1 }],
    ['20240127', { Y: 2024, M: 0, D: 27 }],
    ['2024-02-27T08:06:30', { Y: 2024, M: 1, D: 27, H: 8, m: 6, S: 30 }],
    ['2024-02-27T08:06:30.001', { Y: 2024, M: 1, D: 27, H: 8, m: 6, S: 30.001 }],
    ['2024-02-27T08:06:30.0', { Y: 2024, M: 1, D: 27, H: 8, m: 6, S: 30 }],
    ['2024-02-27T08:06:30,001', { Y: 2024, M: 1, D: 27, H: 8, m: 6, S: 30.001 }],
    ['2024-02-27T08:06:30Z', { Y: 2024, M: 1, D: 27, H: 8, m: 6, S: 30, Z: 'Z' }],
    ['2024-02-03T08:06:30+02:00', { Y: 2024, M: 1, D: 3, H: 8, m: 6, S: 30, Z: '+', OH: 2, Om: 0 }],
    ['2024-02-03T08:06:30.5+02:00', { Y: 2024, M: 1, D: 3, H: 8, m: 6, S: 30.5, Z: '+', OH: 2, Om: 0 }],
    ['20240203T080630+0200', { Y: 2024, M: 1, D: 3, H: 8, m: 6, S: 30, Z: '+', OH: 2, Om: 0 }],
    ['2024-02-03T08:06:30-02:30', { Y: 2024, M: 1, D: 3, H: 8, m: 6, S: 30, Z: '-', OH: 2, Om: 30 }],
    ['2024-02-03T08:06:30-02', { Y: 2024, M: 1, D: 3, H: 8, m: 6, S: 30, Z: '-', OH: 2 }],
    ['20240127T1200', { Y: 2024, M: 0, D: 27, H: 12, m: 0 }],
    ['20240127T120001', { Y: 2024, M: 0, D: 27, H: 12, m: 0, S: 1 }],
    ['20240127T120001,001', { Y: 2024, M: 0, D: 27, H: 12, m: 0, S: 1.001 }],
  ].forEach(([dt, expected]) => {
    it(`parse "${dt}" is parsed as expected`, () => {
      expect(ISODateParser.parse(dt)).to.deep.equal(expected);
    });
  });

  [
    'Last wednesday',
    '2024-22-12',
    '2024-13-01',
    '2024-00-01',
    '2024-01-00',
    '2024-12-42',
    '2023-01-32',
    '2023-02-31',
    '2023-02-29',
    '2018-02-29',
    '2018-03-00',
    '2024-01:27',
    '202401',
    '2024-13',
    '2024-',
    '2024-03-',
    '2024-1201',
    '202412-01',
    '20242212',
    '2024-12-32',
    '2024-02-123',
    '202402123',
    '20240127T12',
    '20240127T12:',
    '20240212T1200:00',
    '2024_02_23',
    '2018-03-01TB0:00:01',
    '2018-03-01A00:00:01',
    '2024-01-01T2008:06:30',
    '20240101T2006:30',
    '2024-01-01T20:0630',
    '2024-01-01T20:06:30.',
    '2024-01-01T20:06:30.01A',
    '2024-01T2008:06:30+',
    '2024-01T2008:06:30-Z',
    '2024-01-27T08:06:30A',
    '2024-01-27T08:06:30ZZ',
    '2024-01-27T08:06:30Z0',
    '2024-01-27T08:06:30+01:',
    '2024-01-27T08:06:30+24:00',
  ].forEach((dt) => {
    it(`parse "${dt}" throws RangeError`, () => {
      expect(() => {
        ISODateParser.parse(dt);
      }).to.throw(RangeError);
    });
  });

  it('enforce separators forces separators to be used', () => {
    expect(new ISODateParser('20070101', undefined, undefined, false).parse().result).to.deep.equal({ Y: 2007, M: 0, D: 1 });
    expect(new ISODateParser('2007-01-01', undefined, undefined, true).parse().result).to.deep.equal({ Y: 2007, M: 0, D: 1 });

    expect(() => {
      new ISODateParser('20070101', undefined, undefined, true).parse();
    }).to.throw(RangeError, /unexpected/i);

    expect(() => {
      new ISODateParser('2007-0101', undefined, undefined, true).parse();
    }).to.throw(RangeError, /unexpected/i);
  });
});
